package com.pscsw.servlet;

import java.text.SimpleDateFormat;
import java.util.Date;

/*

http://47.93.12.9:8080/PrimarySchoolConnectedSystemWeb

ClassInfoMapper:
ClassInfo[] selectAll();
<select id="selectAll" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Sun Oct 07 
			18:16:23 CST 2018. -->
		select
		<include refid="Base_Column_List" />
		from class_info order by class_number ASC
	</select>
	
SubjectInfoMapper:
SubjectInfo[] selectAll();
<select id="selectAll" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Sun Oct 07 
			18:16:23 CST 2018. -->
		select
		<include refid="Base_Column_List" />
		from subject_info order by subject_class ASC
	</select>
		
FeeRecordMapper:
FeeRecord[] selectByFeeNumber(String fee_number);
<select id="selectByFeeNumber" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Sun Oct 07 
			17:54:22 CST 2018. -->
		select
		<include refid="Base_Column_List" />
		from fee_record
		where fee_number = #{fee_number,jdbcType=VARCHAR}
	</select>
	
FeeInfoMapper:
FeeInfo[] selectByClass(String class_name);
FeeInfo[] selectAll();
<select id="selectAll" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Sun Oct 07 
			18:16:23 CST 2018. -->
		select
		<include refid="Base_Column_List" />
		from fee_info
	</select>
<select id="selectByClass" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Sun Oct 07 
			17:54:22 CST 2018. -->
		select
		<include refid="Base_Column_List" />
		from fee_info
		where class_name = #{class_name,jdbcType=VARCHAR}
	</select>
	
UserMapper:
User selectByAccount(User record);
	<select id="selectByAccount" parameterType="com.pscsw.po.User"
		resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Tue Apr 17 
			08:04:15 CST 2018. -->
		select
		<include refid="Base_Column_List" />
		from user
		where account = #{account,jdbcType=VARCHAR}
	</select>
	
StudentInfoMapper:
StudentInfo selectByAccount(String account);

<select id="selectByAccount" parameterType="java.lang.String"
	resultMap="BaseResultMap">
	<!-- WARNING - @mbg.generated This element is automatically generated by 
		MyBatis Generator, do not modify. This element was generated on Sun Oct 07 
		17:54:22 CST 2018. -->
	select
	<include refid="Base_Column_List" />
	from student_info
	where account = #{account,jdbcType=VARCHAR}
</select>

StudentReportMapper:
	StudentReport[] selectByStudentClass(String student_class);

	StudentReport[] selectBySubjectNumber(String subject_number);

	StudentReport[] selectKey(@Param("key") String key, @Param("student_number") String student_number);

	StudentReport[] selectByStudentNumber(String student_number);

	StudentReport[] selectAll();

	<select id="selectKey" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Thu Aug 30 
			00:06:54 CST 2018. -->
		select
		<include refid="Base_Column_List" />
		from student_report
		where student_number =
		#{student_number,jdbcType=VARCHAR} and
		(student_name
		like
		concat('%',#{key,jdbcType=VARCHAR},'%') or
		student_number like
		concat('%',#{key,jdbcType=VARCHAR},'%') or
		student_class like
		concat('%',#{key,jdbcType=VARCHAR},'%') or
		subject_name like
		concat('%',#{key,jdbcType=VARCHAR},'%')) order by
		examination_score
		DESC
	</select>
	<select id="selectByStudentNumber"
		parameterType="java.lang.String" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Sun Oct 07 
			17:54:22 CST 2018. -->
		select
		<include refid="Base_Column_List" />
		from student_report
		where student_number =
		#{student_number,jdbcType=VARCHAR} order
		by examination_score DESC
	</select>
	<select id="selectByStudentClass"
		parameterType="java.lang.String" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Sun Oct 07 
			17:54:22 CST 2018. -->
		select
		<include refid="Base_Column_List" />
		from student_report
		where student_class =
		#{student_class,jdbcType=VARCHAR} order by examination_score DESC
	</select>
	<select id="selectBySubjectNumber"
		parameterType="java.lang.String" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Sun Oct 07 
			17:54:22 CST 2018. -->
		select
		<include refid="Base_Column_List" />
		from student_report
		where subject_number =
		#{subject_number,jdbcType=VARCHAR} order by examination_score DESC
	</select>
	<select id="selectAll" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Sun Oct 07 
			17:54:22 CST 2018. -->
		select
		<include refid="Base_Column_List" />
		from student_report order by examination_score DESC
	</select>
	
*/

import javax.servlet.http.HttpServletRequest;

import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.session.SqlSession;

import com.pscsw.MyBatisUtil;
import com.pscsw.dao.ClassInfoMapper;
import com.pscsw.dao.FeeInfoMapper;
import com.pscsw.dao.FeeRecordMapper;
import com.pscsw.dao.StudentInfoMapper;
import com.pscsw.dao.StudentReportMapper;
import com.pscsw.dao.SubjectInfoMapper;
import com.pscsw.po.ClassInfo;
import com.pscsw.po.FeeInfo;
import com.pscsw.po.FeeRecord;
import com.pscsw.po.StudentInfo;
import com.pscsw.po.StudentReport;
import com.pscsw.po.SubjectInfo;

public class helper {
	static public void onLoadQueryEditScoreData(HttpServletRequest request) {// 班級成绩修改
		String id = request.getParameter("id");
		if (id != null) {
			SqlSession session = MyBatisUtil.getSqlSessionFactory().openSession();
			if (session != null) {
				ClassInfoMapper ClassInfoMapper = session.getMapper(ClassInfoMapper.class);// 获取映射
				ClassInfo cla = ClassInfoMapper.selectByPrimaryKey(Integer.valueOf(id));// 查詢班級
				if (cla != null) {// 通过班级，拿到成绩设置
					StudentReportMapper StudentReportMapper = session.getMapper(StudentReportMapper.class);// 获取映射
					StudentReport[] reports = StudentReportMapper.selectByStudentClass(cla.getClassName());
					if (reports != null) {
						SimpleDateFormat fmt = new SimpleDateFormat("yyyy年MM月dd日 HH时mm分");
						String editData = "";
						for (StudentReport r : reports) {
							editData += String.format("%s,%s,%s,%s,%d,%s\n", r.getStudentName(), r.getStudentNumber(),
									r.getSubjectName(), r.getSubjectNumber(), r.getExaminationScore(),
									fmt.format(r.getExaminationTime()));
						}
						request.getSession().setAttribute("editData", editData);
					}
				}
			}
			session.commit();
			session.close();
		}
	}

	static public void onLoadQueryEditFeeData(HttpServletRequest request) {// 班級费用修改
		String id = request.getParameter("id");
		if (id != null) {
			SqlSession session = MyBatisUtil.getSqlSessionFactory().openSession();
			if (session != null) {
				ClassInfoMapper ClassInfoMapper = session.getMapper(ClassInfoMapper.class);// 获取映射
				ClassInfo cla = ClassInfoMapper.selectByPrimaryKey(Integer.valueOf(id));// 查詢班級
				if (cla != null) {// 通过班级，拿到费用设置
					FeeInfoMapper FeeInfoMapper = session.getMapper(FeeInfoMapper.class);// 获取映射
					FeeInfo[] fees = FeeInfoMapper.selectByClass(cla.getClassName());
					if (fees != null) {
						String editData = "";
						for (FeeInfo f : fees) {
							editData += String.format("%s,%.1f,%s\n", f.getFeeNumber(), f.getClassFee(),
									f.getClassFeeDetail());
						}
						request.getSession().setAttribute("editData", editData);
					}
				}
			}
			session.commit();
			session.close();
		}
	}

	static public void onLoadQueryClassModify(HttpServletRequest request) {// 班級修改
		String id = request.getParameter("id");
		if (id != null) {
			SqlSession session = MyBatisUtil.getSqlSessionFactory().openSession();
			if (session != null) {
				ClassInfoMapper ClassInfoMapper = session.getMapper(ClassInfoMapper.class);// 获取映射
				ClassInfo cla = ClassInfoMapper.selectByPrimaryKey(Integer.valueOf(id));// 查詢班級
				if (cla != null) {
					request.getSession().setAttribute("cla", cla);
				} else {
					request.getSession().removeAttribute("cla");
				}
			}
			session.commit();
			session.close();
		}
	}

	static public void onLoadQueryClasss(HttpServletRequest request) {// 管理，班級信息
		SqlSession session = MyBatisUtil.getSqlSessionFactory().openSession();
		if (session != null) {
			ClassInfoMapper ClassInfoMapper = session.getMapper(ClassInfoMapper.class);// 获取映射
			ClassInfo[] clas = ClassInfoMapper.selectAll();// 查詢班級
			if (clas != null) {
				request.getSession().setAttribute("clas", clas);
			} else {
				request.getSession().removeAttribute("clas");
			}
		}
		session.commit();
		session.close();
	}

	static public void onLoadQuerySubjects(HttpServletRequest request) {// 管理，学校科目
		SqlSession session = MyBatisUtil.getSqlSessionFactory().openSession();
		if (session != null) {
			SubjectInfoMapper SubjectInfoMapper = session.getMapper(SubjectInfoMapper.class);// 获取映射
			SubjectInfo[] subjects = SubjectInfoMapper.selectAll();// 查詢科目
			if (subjects != null) {
				request.getSession().setAttribute("subjects", subjects);
			} else {
				request.getSession().removeAttribute("subjects");
			}
		}
		session.commit();
		session.close();
	}

	static public void onLoadQueryStudentFees(HttpServletRequest request) {// 查询学生繳費
		String account = (String) request.getSession().getAttribute("account");
		if (account != null) {
			SqlSession session = MyBatisUtil.getSqlSessionFactory().openSession();
			if (session != null) {
				StudentInfoMapper StudentInfoMapper = session.getMapper(StudentInfoMapper.class);// 获取映射
				StudentInfo student = StudentInfoMapper.selectByAccount(account);// 通过账号，找到学生
				if (student != null) {
					FeeInfoMapper FeeInfoMapper = session.getMapper(FeeInfoMapper.class);// 获取映射
					FeeInfo[] fees = FeeInfoMapper.selectByClass(student.getStudentClass());// 查詢學生所在班級的应交費用
					if (fees != null) {
						getFeeAlreadyPayed(fees, account);// 查询实缴费用
						request.getSession().setAttribute("fees", fees);
					} else {
						request.getSession().removeAttribute("fees");
					}
				}
			}
			session.commit();
			session.close();
		}
	}

	static void getFeeAlreadyPayed(FeeInfo[] fees, String account) {
		SqlSession session = MyBatisUtil.getSqlSessionFactory().openSession();
		if (session != null) {
			for (FeeInfo fee : fees) {
				FeeRecordMapper FeeRecordMapper = session.getMapper(FeeRecordMapper.class);// 获取映射
				FeeRecord[] records = FeeRecordMapper.selectByFeeNumber(fee.getFeeNumber());// 通过缴费代码，缴费记录
				float feeAlreadyPayed = 0;// 已缴费用
				if (records != null) {// 实缴费用记录
					for (FeeRecord r : records) {
						if (r.getAccount().equals(account)) {// 是我缴的费用？
							feeAlreadyPayed += r.getFeeTotal();
						}
					}
				}
				fee.setClassFeeRecord(feeAlreadyPayed);// 我的已缴费用
			}
			session.commit();
			session.close();
		}
	}

	static public void onLoadQueryStudentInfo(HttpServletRequest request) {// 查询学生信息
		String account = (String) request.getSession().getAttribute("account");
		if (account != null) {
			SqlSession session = MyBatisUtil.getSqlSessionFactory().openSession();
			if (session != null) {
				StudentInfoMapper StudentInfoMapper = session.getMapper(StudentInfoMapper.class);// 获取映射
				StudentInfo student = StudentInfoMapper.selectByAccount(account);
				if (student != null) {
					request.getSession().setAttribute("student", student);
				} else {
					request.getSession().removeAttribute("student");
				}
			}
			session.commit();
			session.close();
		}
	}

	static public void onLoadQueryStudentReports(HttpServletRequest request) {// 查询学生成绩报告
		String account = (String) request.getSession().getAttribute("account");
		if (account != null) {
			SqlSession session = MyBatisUtil.getSqlSessionFactory().openSession();
			if (session != null) {
				StudentInfoMapper StudentInfoMapper = session.getMapper(StudentInfoMapper.class);// 获取映射
				StudentInfo StudentInfo = StudentInfoMapper.selectByAccount(account);
				if (StudentInfo != null) {
					StudentReportMapper StudentReportMapper = session.getMapper(StudentReportMapper.class);// 获取映射
					String searchKey = request.getParameter("searchKey");
					System.out.println(StudentInfo.getStudentNumber());
					if (searchKey != null && !searchKey.isEmpty()) {
						StudentReport[] reports = StudentReportMapper.selectKey(searchKey,
								StudentInfo.getStudentNumber());
						if (reports != null) {
							getRanks(reports);// 獲取排名
							request.getSession().setAttribute("reports", reports);
						}
					} else {
						StudentReport[] reports = StudentReportMapper
								.selectByStudentNumber(StudentInfo.getStudentNumber());
						if (reports != null) {
							getRanks(reports);// 獲取排名
							request.getSession().setAttribute("reports", reports);
						}
					}
				}

				session.commit();
				session.close();
			}
		}
	}

	static void getRanks(StudentReport[] reports) {// 獲取班级排名
		SqlSession session = MyBatisUtil.getSqlSessionFactory().openSession();
		if (session != null) {
			StudentReportMapper StudentReportMapper = session.getMapper(StudentReportMapper.class);// 获取映射
			StudentReport[] all = StudentReportMapper.selectAll();// 按成绩升序排列的
			for (StudentReport r : reports) {
				int rank = 0;
				int total = 0;
				for (StudentReport a : all) {
					if (r.getStudentClass().equals(a.getStudentClass())
							&& r.getSubjectNumber().equals(a.getSubjectNumber())) {// 同一个班，同一个课程
						total++;
						if (a.getExaminationScore() < r.getExaminationScore()) {
							rank++;
						}
					}
				}
				r.setExaminationRank(total - rank);
			}
			session.commit();
			session.close();
		}
	}
}
